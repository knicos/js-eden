// Copyright (c) 2013, Empirical Modelling Group
// All rights reserved.
//
// See LICENSE.txt

Arc is (self+":"+this)(x-->0,y-->0,r-->1,sAngle-->0,eAngle-->90,colour-->"black");

${{

EdenUI.plugins.Canvas2D.drawArc = function(observable, x, y, r, eAngle, sAngle, colour) {
	console.log("Drawing Arc for "+observable+" at " + x + "," + y);
	return;
	var x = scope.lookup("/x").value;
	var y = scope.lookup("/y").value;
	var r = scope.lookup("/r").value;
	var eAngle = scope.lookup("/eAngle").value;
	var sAngle = scope.lookup("/sAngle").value;
	var colour = scope.lookup("/colour").value;
	var radiansPerUnit = Math.PI / root.lookup("semicircleAngle").value();
	var sRadians = sAngle * radiansPerUnit;
	var eRadians = eAngle * radiansPerUnit;
	var twoPI = 2 * Math.PI;
	sRadians = sRadians % twoPI;
	if (sRadians < 0) {
		sRadians = sRadians + twoPI;
	}
	eRadians = eRadians % twoPI;
	if (eRadians < 0) {
		eRadians = eRadians + twoPI;
	}

	var anticlockwise;
	if (this.drawingOptions !== undefined && "direction" in this.drawingOptions) {
		var directionName = this.drawingOptions.direction;
		var turnedThroughAC = this.eRadians - this.sRadians;
		if (this.eRadians < this.sRadians) {
			turnedThroughAC = turnedThroughAC + 2 * Math.PI;
		}
		switch (directionName) {
		case "anticlockwise":
		case "acw":
		case "ccw":
			anticlockwise = true;
			break;
		case "auto":
			anticlockwise = this.sAngle < this.eAngle;
			break;
		case "clockwise":
		case "cw":
			anticlockwise = false;
			break;
		case "major":
			anticlockwise = turnedThroughAC > Math.PI;
			break;
		case "minor":
			anticlockwise = turnedThroughAC <= Math.PI;
			break;
		default:
			//Invalid value specified.
			anticlockwise = true;
		}
	} else {
		//Default to "auto" 
		anticlockwise = sAngle < eAngle;
	}
	if (scale < 0) {
		sRadians = -sRadians;
		eRadians = -eRadians;
		anticlockwise = !anticlockwise;
	}
	r = r - context.lineWidth / 2;
	context.beginPath();
	context.arc(x, y, r, -sRadians, -eRadians, anticlockwise);
	context.strokeStyle = colour;
	context.stroke();

	if (this.drawingOptions !== undefined && this.drawingOptions.arrowhead instanceof Arrowhead) {
		var cos1 = Math.cos(-sRadians);
		var sin1 = Math.sin(-sRadians);
		var cos2 = Math.cos(-eRadians);
		var sin2 = Math.sin(-eRadians);
		var x1 = this.x + r * cos1;
		var y1 = this.y + r * sin1;
		var x2 = this.x + r * cos2;
		var y2 = this.y + r * sin2;
		var gradient1 = -cos1 / sin1;
		var gradient2 = -cos2 / sin2;
		var reverse1, reverse2;
		if (anticlockwise) {
			reverse1 = sRadians <= Math.PI;
			reverse2 = eRadians <= Math.PI;
		} else {
			reverse1 = sRadians > Math.PI;
			reverse2 = eRadians > Math.PI;
		}
		this.drawingOptions.arrowhead.draw(context, scale, x1, y1, gradient1, reverse1, x2, y2,
			gradient2, reverse2);
	}
};

}}$;
