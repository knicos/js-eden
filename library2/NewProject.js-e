{"statements":[{"source":"/** Debugging flags. */\ndebug = ${{ {jsExceptions: edenUI.getOptionValue(\"developer\") == \"true\" } }}$;","active":true},{"source":"time is ${{ Math.floor((new Date()).getTime() / 1000) }}$;","active":true},{"source":"from is ${{ scope.hasCause(context.lookup(\"name\").value(scope)) }}$;","active":true},{"source":"has is ${{ scope.hasOverride(context.lookup(\"name\").value(scope)) }}$;","active":true},{"source":"/** Outermost observable in scope. #library */\nthis is ${{ scope.baseCause() }}$;","active":true},{"source":"/** Innermost observable in scope. #library */\nself is ${{ scope.self() }}$;","active":true},{"source":"import jseden2/lib/jsfuncs;","active":false},{"source":"console = [];","active":true},{"source":"/** Print lines to console. #library */\nwhen (console# > 0) {\n\tfor (message in console) {\n\t\tmessage = [str(value->message)];\n\t\tcall _js_console_log(args->message);\n\t}\n\tconsole = [];\n\t_menubar_status = message[1];\n}(message->@)","active":true},{"source":"errors = [];","active":true},{"source":"when (errors# > 0) {\n\tfor (error in errors) {\n\t\t${{ eden.error(new Error(root.value(\"error\",scope)),\"error\"); }}$;\n\t}\n\terrors = [];\n}\n\n\n/** Template View. #library */","active":true},{"source":"/** Template View. #library */\nView is (\"View:\")(\n\tname-->this,\n\ttype-->\"ScriptInput\",\n\tvisibility-->\"visible\",\n\ttitle-->this,\n\twidth-->200,\n\theight-->150,\n\tx-->10,\n\ty-->10\n);","active":true},{"source":"ScriptView is View(title-->\"Script View\",type->\"ScriptView2\");","active":true},{"source":"GraphicView is View(title-->\"Graphic View\",type->\"SVGView\");","active":true},{"source":"/** Construct views. #library */\nwhen(createViews# > 0) {\n\tfor (view in createViews) {\n\t\tname = view.name;\n\t\ttype = view.type;\n\t\ttitle = view.title;\n\t\tcurtype = activeDialogs[name];\n\t\tif (curtype == type) {\n\t\t\t//view.visibility = \"visible\";\n\t\t\tname = [name];\n\t\t\tcall _js_brieflyHightlightView(args->name);\n\t\t\t//return;\n\t\t}\n\n\t\tviews += view;\n\t\tif (mobile) {\n\t\t\t${{ edenUI.vtabs.add(edenUI.createRawView(root.lookup(\"name\").value(scope),root.lookup(\"type\").value(scope),root.lookup(\"title\").value(scope))); }}$;\n\t\t} else {\n\t\t\t${{ edenUI.createView(root.lookup(\"name\").value(scope),root.lookup(\"type\").value(scope),root.lookup(\"title\").value(scope)); }}$;\n\t\t}\n\t}\n\tcreateViews = [];\n}(name-->@,type-->@,view-->@,title-->@)","active":true},{"source":"when (tabs_views_new) {\n\tconsole += \"NEW TAB\";\n\tnview is View(name->\"randomname\",type->\"ScriptView2\");\n\tcreateViews += nview;\n}","active":true},{"source":"when (tabs_views_current) {\n\tif (mobile) {\n\t\tfor (v in views) {\n\t\t\tif (tabs_views_current == v.name) {\n\t\t\t\t//${{ edenUI.vtabs.build(root.lookup(\"_viewname\").value(scope), root.lookup(\"tabs_views_current\").value(scope)); }}$;\n\t\t\t\t//${{ $(document.body).find(\"#mainview\").append(edenUI.createRawView(root.lookup(\"tabs_views_current\").value(scope),undefined).contents); }}$;\n\t\t\t\t//break;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t}\n}(v-->@,i-->0)\n\n/** Execute a string as script. #library */","active":true},{"source":"/** Execute a string as script. #library */\nwhen (execute) {\n\t${{ eden.execute2(root.value(\"execute\",scope)); }}$;\n}","active":true},{"source":"when (menu_new_graphicview) {\n\tcreateViews += View(name->${{makeRandomName()}}$,type->\"SVGView\",title->\"Graphic View\");\n}","active":true},{"source":"when (menu_new_scriptview) {\n\tcreateViews += ScriptView(name->${{makeRandomName()}}$);\n}","active":true},{"source":"when (menu_new_obslist) {\n\tcreateViews += View(name->${{makeRandomName()}}$,type->\"ObservableList\",title->\"Observable List\");\n}\n\n\n// Autocalc compatibility","active":true},{"source":"autocalc = 1;","active":false},{"source":"autocalc = 0;","active":false},{"source":"import jseden2/lib/type;","active":false},{"source":"import jseden2/lib/search;","active":false},{"source":"import jseden2/lib/svg;\n//import lib/core;\n//import lib/math;\n//import lib/string;\n//import lib/colour;\n//import lib/scoping;\n\n/** Maximum. #library */","active":false},{"source":"/** Maximum. #library */\nmax is a if (a >= b) else b;","active":true},{"source":"/** Minimum. #library */\nmin is a if (a <= b) else b;","active":true},{"source":"/** Is this a mobile device? #library */\nmobile is ${{ mobilecheck(); }}$;","active":true},{"source":"_viewname is (view.name)(view in views);","active":true},{"source":"when (mobile && views# > 0) {\n\tif (views# == 1) tabs_views_current = views[1].name;\n\t//${{ edenUI.vtabs.build(root.lookup(\"_viewname\").value(scope), root.lookup(\"tabs_views_current\").value(scope)); }}$;\n}","active":true},{"source":"autocalc = 1;","active":true},{"source":"when (_jseden_loaded) {\n\tcreateViews = [];\n\tviews = [];\n\tactiveDialogs = [];\n\n\tinitialViews = ${{ URLUtil.getParameterByName(\"views\") }}$;\n\tif (initialViews == \"\" || initialViews == \"default\") {\n\t\t_view_projects_x = 0;\n\t\t_view_projects_y = 0;\n\t\t_view_projects_width = 210;\n\t\t_view_projects_height = screenHeight;\n\t\t//createView = Canvas2D(name->\"picture\");\n\t\t//wait 1;\n\t\tpicturecenterx is screenWidth / 2 - 30 - _view_picture_width;\n\t\tpicturecenterprojx is _view_projects_width + _views_frame_width;\n\t\t_view_picture_x = max(a->picturecenterx, b->picturecenterprojx);\n\t\t_view_picture_y = screenHeight / 2 - _view_picture_height / 2;\n\t\tif ((picture == @ || picture == []) && ${{ \"logo\" in edenUI.branding }}$) {\n\t\t\t//picture is [Image(_view_picture_width / 2 - ${{edenUI.branding.logo.width}}$ / 2, _view_picture_height / 2 - ${{edenUI.branding.logo.height}}$ / 2, ${{edenUI.branding.logo.url}}$)];\n\t\t}\n\t\tinputview is ScriptView(name->\"input\");\n\t\tif (mobile) {\n\t\t\t${{ $(document.body).append($(\"<div id='viewtabs'></div><div id='mainview'></div>\")); }}$;\n\t\t\t${{ edenUI.vtabs = new EdenUI.MobileTabs($(document.body).find(\"#viewtabs\").get(0), $(document.body).find(\"#mainview\").get(0)); }}$;\n\t\t\t//views += inputview;\n\t\t\t//create = inputview;\n\t\t}\n\t\tcreateViews += inputview;\n\t\t_view_input_agent = \"view/script/input\";\n\t\t_view_input_height = _view_picture_height;\n\t\tinputcenterx is screenWidth / 2 + 30;\n\t\tinputcenterxpic is _view_picture_x + _view_picture_width + _views_frame_width + (_view_picture_x - (_view_projects_x + _view_projects_width + _views_frame_width));\n\t\t_view_input_x = min(a->inputcenterx,b->inputcenterxpic);\n\t\t_view_input_y = screenHeight / 2 - _view_input_height / 2;\n\t}\n\n\tloaded = true;\n}\n//forget(&initialViews);","active":true},{"source":"","active":false},{"source":"/** Javascript Function Template. #library */\nJSFunction is (self + \":\" + function)(\n\tobject-->@,\n\tfunction-->@,\n\targs-->[]\n);","active":true},{"source":"_js_console_log is JSFunction(object->\"console\",function->\"console.log\");","active":true},{"source":"_js_brieflyHighlightView is JSFunction(object->\"edenUI\",function->\"edenUI.brieflyHighlighView\");","active":true},{"source":"/** Convert to character. #library #types */\nchar is ${{String.fromCharCode(context.value(\"value\",scope))}}$ if (type == \"number\")\n\t\telse (${{String.fromCharCode(1)}}$ if (value) else ${{String.fromCharCode(0)}}$) if (type == \"boolean\")\n\t\telse ${{context.value(\"value\",scope).charAt(0)}}$ if (type == \"string\")\n\t\telse @;","active":true},{"source":"/** Convert to an integer. #library #types */\nint is value if (typeof == \"number\") else ${{ parseInt(context.value(\"value\",scope)) }}$ if (typeof == \"string\") else @;","active":true},{"source":"/** Convert to a string. #library #types */\nstr is @ if (value == @) else value if (typeof == \"string\") else edenCode;","active":true},{"source":"/** Generate eden script for a value. #library */\nedenCode is ${{ Eden.edenCodeForValue(context.value(\"value\",scope)) }}$(value->value);","active":true},{"source":"/** Get javascript type. #library #types */\ntypeof is ${{typeof context.value(\"value\",scope)}}$(value->value);","active":true},{"source":"/** Get a js-eden type name. #library #types */\ntype is \"list\" if (typeof == \"object\") else typeof;","active":false},{"source":"/** #library #types */\nisBoolean is typeof == \"boolean\";","active":true},{"source":"/** #library #types */\nisChar is typeof == \"string\" && value# == 1;","active":true},{"source":"/** #library #types */\nisDefined is ${{ context.lookup(context.value(\"name\",scope)).definition !== undefined }}$(name->name);","active":true},{"source":"/** #library #types */\nisInt is ${{ Number.isInteger(context.value(\"value\",scope)) }}$(value->value);","active":true},{"source":"/** #library #types */\nisList is type == \"list\";","active":true},{"source":"/** #library #types */\nisNumber is typeof == \"number\";","active":true},{"source":"/** #library #types */\nisString is typeof == \"string\";","active":true},{"source":"/** Search for symbols. #library */\nquery is ${{ context.queryNames(edenUI.regExpFromStr(context.lookup(\"names\").value(scope),\"\",false,\"regexp\")) }}$ if names\n\telse ${{ context.queryValues(edenUI.regExpFromStr(context.lookup(\"values\").value(scope),\"\",false,\"regexp\"), scope) }}$ if values\n\telse []\n\t(names-->@,values-->@);","active":true},{"source":"/** Union of two lists \"a\" and \"b\". #library */\nunion is ${{ rt.union(context.lookup(\"a\").value(scope),context.lookup(\"b\").value(scope)) }}$(a-->[],b-->[]);","active":true},{"source":"/** List of symbols dependencies. #library */\ndependencies is ${{ context.lookup(context.lookup(\"name\").value(scope)).getDependencies() }}$(name-->@);","active":true},{"source":"/** List of symbols dependants. #library */\ndependants is ${{ context.lookup(context.lookup(\"name\").value(scope)).getSubscribers() }}$(name-->@);","active":true},{"source":"_js_svg_createElement is JSFunction(function->\"EdenUI.SVG.createElement\", object->\"EdenUI.SVG\");","active":true},{"source":"_js_svg_updateAttribute is JSFunction(function->\"EdenUI.SVG.updateAttribute\", object->\"EdenUI.SVG\");","active":true},{"source":"_js_svg_updateContent is JSFunction(function->\"EdenUI.SVG.updateContent\", object->\"EdenUI.SVG\");","active":true},{"source":"_js_svg_createElement_args_line is [\"picture\", i, \"path\"];","active":true},{"source":"_js_svg_updateAttribute_args_line_d is [\"picture\", i, \"d\", \"M \" + e.start.x + \" \" + e.start.y + \" L \" + e.end.x + \" \" + e.end.y];","active":true},{"source":"_js_svg_updateAttribute_args_line_style is [\"picture\", i, \"style\", \"stroke: \"+e.colour+\"; stroke-width: \"+e.width+\"px;\"];","active":true},{"source":"_js_svg_createElement_args_rect is [\"picture\", i, \"rect\"];","active":true},{"source":"_js_svg_updateAttribute_args_rect_x is [\"picture\", i, \"x\", \"\"+ e.position.x];","active":true},{"source":"_js_svg_updateAttribute_args_rect_y is [\"picture\", i, \"y\", \"\"+ e.position.y];","active":true},{"source":"_js_svg_updateAttribute_args_rect_width is [\"picture\", i, \"width\", \"\"+ e.size.x];","active":true},{"source":"_js_svg_updateAttribute_args_rect_height is [\"picture\", i, \"height\", \"\"+ e.size.y];","active":true},{"source":"_js_svg_updateAttribute_args_rect_style is [\"picture\", i, \"style\", \"fill: \" + e.colour + \"; stroke: \\\"\" + e.border+ \"\\\"; stroke-width: \" + e.borderSize+\";\"];","active":true},{"source":"_js_svg_updateAttribute_args_rect_stroke is [\"picture\", i, \"stroke\", \"\"+ e.border];","active":true},{"source":"_js_svg_updateAttribute_args_rect_strokewidth is [\"picture\", i, \"stroke-width\", \"\"+ e.borderSize];","active":true},{"source":"_js_svg_updateAttribute_args_rect_fill is [\"picture\", i, \"fill\", \"\"+ e.colour];","active":true},{"source":"_js_svg_createElement_args_text is [\"picture\", i, \"text\"];","active":true},{"source":"_js_svg_updateContent_args_text is [\"picture\", i, e.text];","active":true},{"source":"_js_svg_updateAttribute_args_text_style is [\"picture\", i, \"style\", \"fill: \" + e.colour + \"; stroke: \"+e.colour+\"; font-size: \" + e.size+ \"pt; font-weight: \" + e.weight+\";\"];","active":true},{"source":"/** #library #svg */\nPoint is [x,y](x-->0,y-->0);","active":true},{"source":"/** #library #svg #drawable */\nLine is self(start-->Point,end-->Point,colour-->\"black\",width-->2);","active":true},{"source":"/** #library #svg #drawable */\nText is self(position-->Point,text-->\"Text\",colour-->\"black\",size-->12,family->\"Arial\",weight->\"normal\");","active":true},{"source":"/** #library #svg #drawable */\nRectangle is self(position-->Point,size-->Point,colour-->\"black\",border-->\"black\",borderSize-->2);","active":true},{"source":"/** Update the screen. #library */\nwhen (picture) {\n\ti = 0;\n\tfor (e in picture) {\n\t\tif (e.self == \"Line\") {\n\t\t\tcall _js_svg_createElement(args->_js_svg_createElement_args_line);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_line_d);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_line_style);\n\t\t\ti = i + 1;\n\t\t} else if (e.self == \"Rectangle\") {\n\t\t\tcall _js_svg_createElement(args->_js_svg_createElement_args_rect);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_rect_x);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_rect_y);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_rect_width);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_rect_height);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_rect_stroke);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_rect_strokewidth);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_rect_fill);\n\t\t\ti = i + 1;\n\t\t} else if (e.self == \"Text\") {\n\t\t\tcall _js_svg_createElement(args->_js_svg_createElement_args_text);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_rect_x);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_rect_y);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_text_style);\n\t\t\tcall _js_svg_updateContent(args->_js_svg_updateContent_args_text);\n\t\t\ti = i + 1;\n\t\t} else if (e.self == \"Circle\") {\n\t\t\tcall _js_svg_createElement(args->_js_svg_createElement_args_circle);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_circle_x);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_circle_y);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_circle_r);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_rect_stroke);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_rect_strokewidth);\n\t\t\tcall _js_svg_updateAttribute(args->_js_svg_updateAttribute_args_rect_fill);\n\t\t\ti = i + 1;\n\t\t}\n\t}\n}(i-->0)","active":true},{"source":"/** #library #svg #drawable */\nCircle is self(position-->Point,radius-->100,colour-->\"white\",border-->\"black\",borderSize-->2);","active":true},{"source":"_js_svg_createElement_args_circle is [\"picture\", i, \"circle\"];","active":true},{"source":"_js_svg_updateAttribute_args_circle_x is [\"picture\", i, \"cx\", \"\"+ e.position.x];","active":true},{"source":"_js_svg_updateAttribute_args_circle_y is [\"picture\", i, \"cy\", \"\"+ e.position.y];","active":true},{"source":"_js_svg_updateAttribute_args_circle_r is [\"picture\", i, \"r\", \"\"+ e.radius];","active":true}],"title":"NewProject","scriptviews":{"Script View":[33]}}
