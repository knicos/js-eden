/**
 * @title Type Checking
 * Copyright (c) 2014, Empirical Modelling Group
 * All rights reserved.
 *
 * See LICENSE.txt
 *
 * Functions for casting between types, determining the type to which a value
 * belongs, etc.
 */

//=============================================================================
//Type casting functions.

/** Convert to character. #library #types */
char is ${{String.fromCharCode(context.value("value",scope))}}$ if (type == "number")
		else (${{String.fromCharCode(1)}}$ if (value) else ${{String.fromCharCode(0)}}$) if (type == "boolean")
		else ${{context.value("value",scope).charAt(0)}}$ if (type == "string")
		else @;

/** Convert to an integer. #library #types */
int is value if (typeof == "number") else ${{ parseInt(context.value("value",scope)) }}$ if (typeof == "string") else @;

/** Convert to a string. #library #types */
str is @ if (value == @) else value if (typeof == "string") else edenCode;

/** Generate eden script for a value. #library */
edenCode is ${{ Eden.edenCodeForValue(context.value("value",scope)) }}$(value->value);

//=============================================================================

/** Get javascript type. #library #types */
typeof is ${{typeof context.value("value",scope)}}$(value->value);
/** Get a js-eden type name. #library #types */
type is "list" if (typeof == "object") else typeof;

/** #library #types */
isBoolean is typeof == "boolean";
/** #library #types */
isChar is typeof == "string" && value# == 1;
/** #library #types */
isDefined is ${{ context.lookup(context.value("name",scope)).definition !== undefined }}$(name->name);
/** #library #types */
isInt is ${{ Number.isInteger(context.value("value",scope)) }}$(value->value);
/** #library #types */
isList is type == "list";
/** #library #types */
isNumber is typeof == "number";
//isPointer
/** #library #types */
isString is typeof == "string";

